{
  "version": 3,
  "sources": ["../../react-router-dom/dom.ts", "../../react-router-dom/index.tsx"],
  "sourcesContent": ["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this navigation's state updates\n   */\n  unstable_flushSync?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProviderProps,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  unstable_DataStrategyFunction,\n  unstable_DataStrategyFunctionArgs,\n  unstable_DataStrategyMatch,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  unstable_DataStrategyFunction,\n  unstable_DataStrategyFunctionArgs,\n  unstable_DataStrategyMatch,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams, ErrorResponseImpl as UNSAFE_ErrorResponseImpl };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker,\n  BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n  unstable_HandlerResult,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  var __reactRouterVersion: string;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"0\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  unstable_dataStrategy?: unstable_DataStrategyFunction;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    unstable_dataStrategy: opts?.unstable_dataStrategy,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    unstable_dataStrategy: opts?.unstable_dataStrategy,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        router.window.document == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={{\n                  v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n                }}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <DataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\ntype NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator, basename } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    if (nextLocationPathname && basename) {\n      nextLocationPathname =\n        stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n"],
  "mappings": "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",
  "names": []
}
